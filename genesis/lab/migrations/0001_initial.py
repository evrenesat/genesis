# -*- coding: utf-8 -*-
# Generated by Django 1.9 on 2016-12-20 17:39
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Admission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_urgent', models.BooleanField(default=False, verbose_name='Urgent')),
                ('indications', models.TextField(blank=True, null=True, verbose_name='Indications')),
                ('history', models.TextField(blank=True, null=True, verbose_name='Reproductive story / Family Tree')),
                ('week', models.CharField(blank=True, max_length=7, null=True, verbose_name='Pregnancy week')),
                ('upd_week', models.CharField(blank=True, max_length=7, null=True, verbose_name='UPD')),
                ('lmp_date', models.DateField(blank=True, null=True, verbose_name='LMP')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Admission date')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Timestamp')),
            ],
            options={
                'verbose_name': 'Patient Admission',
                'verbose_name_plural': 'Patient Admissions',
            },
        ),
        migrations.CreateModel(
            name='AdmissionSample',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Creation Date')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Timestamp')),
                ('amount', models.PositiveSmallIntegerField(default=1, verbose_name='Amount')),
                ('admission', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='lab.Admission', verbose_name='Patient Admission')),
            ],
            options={
                'verbose_name': 'Sample',
                'verbose_name_plural': 'Samples',
            },
        ),
        migrations.CreateModel(
            name='AdmissionState',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.CharField(blank=True, max_length=50, null=True, verbose_name='Comment')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Update date')),
                ('admission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lab.Admission', verbose_name='Admission')),
            ],
            options={
                'ordering': ('timestamp',),
                'verbose_name': 'Admission State',
                'verbose_name_plural': 'Admission States',
            },
        ),
        migrations.CreateModel(
            name='AdmissionStateDefinition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Name')),
                ('explanation', models.TextField(blank=True, null=True, verbose_name='Explanation')),
                ('hardcoded', models.BooleanField(default=False, editable=False, verbose_name='Cannot be deleted')),
                ('first', models.BooleanField(default=False, verbose_name='First state')),
                ('reject', models.BooleanField(default=False, verbose_name='Reject state')),
                ('finished', models.BooleanField(default=False, verbose_name='Finish state')),
                ('order', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Order')),
            ],
            options={
                'ordering': ('order',),
                'verbose_name': 'Admission State Definition',
                'verbose_name_plural': 'Admission State Definitions',
            },
        ),
        migrations.CreateModel(
            name='Analyse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('no_of_groups', models.PositiveIntegerField(blank=True, choices=[(1, 1), (2, 2), (3, 3)], default=1, help_text='Number of work groups', null=True, verbose_name='Work group #')),
                ('result_copy', models.TextField(blank=True, editable=False, null=True, verbose_name='Copy of result')),
                ('result', models.TextField(blank=True, help_text='Can be used to override entered/calculated result parameters<br>Format:<br> key=val<br />key2=val2', null=True, verbose_name='Result parameters')),
                ('comment', models.TextField(blank=True, help_text='Interpretation of analyse results', null=True, verbose_name='Interpretation')),
                ('short_result', models.TextField(blank=True, help_text='Normal Karyotype, Trisomy 21', null=True, verbose_name='Result')),
                ('result_json', models.TextField(editable=False, null=True, verbose_name='Analyse result dict')),
                ('sample_amount', models.PositiveIntegerField(blank=True, choices=[(0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12), (13, 13), (14, 14), (15, 15), (16, 16), (17, 17), (18, 18), (19, 19), (20, 20), (21, 21), (22, 22), (23, 23), (24, 24), (25, 25), (26, 26), (27, 27), (28, 28), (29, 29), (30, 30), (31, 31), (32, 32), (33, 33), (34, 34), (35, 35), (36, 36), (37, 37), (38, 38), (39, 39), (40, 40), (41, 41), (42, 42), (43, 43), (44, 44), (45, 45), (46, 46), (47, 47), (48, 48), (49, 49), (50, 50), (51, 51), (52, 52), (53, 53), (54, 54), (55, 55), (56, 56), (57, 57), (58, 58), (59, 59), (60, 60), (61, 61), (62, 62), (63, 63), (64, 64), (65, 65), (66, 66), (67, 67), (68, 68), (69, 69), (70, 70), (71, 71), (72, 72), (73, 73), (74, 74), (75, 75), (76, 76), (77, 77), (78, 78), (79, 79), (80, 80), (81, 81), (82, 82), (83, 83), (84, 84), (85, 85), (86, 86), (87, 87), (88, 88), (89, 89), (90, 90), (91, 91), (92, 92), (93, 93), (94, 94), (95, 95), (96, 96), (97, 97), (98, 98), (99, 99), (100, 100), (101, 101), (102, 102), (103, 103), (104, 104), (105, 105), (106, 106), (107, 107), (108, 108), (109, 109), (110, 110), (111, 111), (112, 112), (113, 113), (114, 114), (115, 115), (116, 116), (117, 117), (118, 118), (119, 119), (120, 120), (121, 121), (122, 122), (123, 123), (124, 124), (125, 125), (126, 126), (127, 127), (128, 128), (129, 129), (130, 130), (131, 131), (132, 132), (133, 133), (134, 134), (135, 135), (136, 136), (137, 137), (138, 138), (139, 139), (140, 140), (141, 141), (142, 142), (143, 143), (144, 144), (145, 145), (146, 146), (147, 147), (148, 148), (149, 149), (150, 150), (151, 151), (152, 152), (153, 153), (154, 154), (155, 155), (156, 156), (157, 157), (158, 158), (159, 159), (160, 160), (161, 161), (162, 162), (163, 163), (164, 164), (165, 165), (166, 166), (167, 167), (168, 168), (169, 169), (170, 170), (171, 171), (172, 172), (173, 173), (174, 174), (175, 175), (176, 176), (177, 177), (178, 178), (179, 179), (180, 180), (181, 181), (182, 182), (183, 183), (184, 184), (185, 185), (186, 186), (187, 187), (188, 188), (189, 189), (190, 190), (191, 191), (192, 192), (193, 193), (194, 194), (195, 195), (196, 196), (197, 197), (198, 198), (199, 199)], null=True, verbose_name='Sample Amount')),
                ('sample_unit', models.CharField(blank=True, choices=[('cc', 'cc')], max_length=10, null=True, verbose_name='Unit')),
                ('medium_amount', models.PositiveIntegerField(blank=True, choices=[(0, 0), (1, 1), (2, 2), (3, 3), (4, 4)], null=True, verbose_name='Medium Amount')),
                ('group_relation', models.CharField(blank=True, max_length=50, null=True)),
                ('finished', models.BooleanField(default=False, verbose_name='Finished')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Definition date')),
                ('external', models.BooleanField(default=False, editable=False, help_text='Analysed by an external lab', verbose_name='Goes to external lab')),
                ('completion_time', models.DateTimeField(editable=False, null=True, verbose_name='Completion time')),
                ('approve_time', models.DateTimeField(editable=False, null=True, verbose_name='Approve time')),
                ('approved', models.BooleanField(default=False, verbose_name='Approved')),
                ('accepted', models.BooleanField(default=False, verbose_name='Accepted')),
                ('admission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lab.Admission', verbose_name='Patient Admission')),
            ],
            options={
                'verbose_name': 'Analyse',
                'verbose_name_plural': 'Analysis',
                'permissions': (('can_approve_analysis', 'Can approve analysis'), ('can_finish_analyse', 'Can finish analysis'), ('can_accept_analyse', 'Can accept analysis'), ('can_enter_data_to_analyse', 'Can enter data to analysis')),
            },
        ),
        migrations.CreateModel(
            name='AnalyseType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group_type', models.BooleanField(default=False, editable=False, help_text='This is a group type, consist of other analyse types', verbose_name='Group')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Name')),
                ('code', models.CharField(blank=True, max_length=10, null=True, verbose_name='Code name')),
                ('footnote', models.TextField(blank=True, help_text='This will be shown under the report', null=True, verbose_name='Report footnote')),
                ('external', models.BooleanField(default=False, editable=False, help_text='Analysed by an external lab', verbose_name='Goes to external lab')),
                ('external_price', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=6, null=True, verbose_name='External lab price')),
                ('price', models.DecimalField(decimal_places=2, default=0, max_digits=6, verbose_name='Price')),
                ('alternative_price', models.DecimalField(blank=True, decimal_places=2, default=0, help_text='Alternative price definition. Can be used for foregeign currencies etc.', max_digits=6, null=True, verbose_name='Alternative price')),
                ('process_time', models.SmallIntegerField(blank=True, null=True, verbose_name='Process Time')),
                ('order', models.PositiveSmallIntegerField(blank=True, choices=[(0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12), (13, 13), (14, 14), (15, 15), (16, 16), (17, 17), (18, 18), (19, 19), (20, 20), (21, 21), (22, 22), (23, 23), (24, 24), (25, 25), (26, 26), (27, 27), (28, 28), (29, 29), (30, 30), (31, 31), (32, 32), (33, 33), (34, 34), (35, 35), (36, 36), (37, 37), (38, 38), (39, 39), (40, 40), (41, 41), (42, 42), (43, 43), (44, 44), (45, 45), (46, 46), (47, 47), (48, 48), (49, 49), (50, 50), (51, 51), (52, 52), (53, 53), (54, 54), (55, 55), (56, 56), (57, 57), (58, 58), (59, 59), (60, 60), (61, 61), (62, 62), (63, 63), (64, 64), (65, 65), (66, 66), (67, 67), (68, 68), (69, 69), (70, 70), (71, 71), (72, 72), (73, 73), (74, 74), (75, 75), (76, 76), (77, 77), (78, 78), (79, 79), (80, 80), (81, 81), (82, 82), (83, 83), (84, 84), (85, 85), (86, 86), (87, 87), (88, 88), (89, 89), (90, 90), (91, 91), (92, 92), (93, 93), (94, 94), (95, 95), (96, 96), (97, 97), (98, 98), (99, 99)], null=True, verbose_name='Sort order')),
            ],
            options={
                'ordering': ('order',),
                'verbose_name': 'Analyse Type',
                'verbose_name_plural': 'Analyse Types',
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, unique=True, verbose_name='Name')),
                ('code', models.CharField(blank=True, max_length=5, null=True, verbose_name='Code')),
            ],
            options={
                'verbose_name': 'Analyse Group',
                'verbose_name_plural': 'Analyse Groups',
            },
        ),
        migrations.CreateModel(
            name='Doctor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Name')),
                ('surname', models.CharField(max_length=50, verbose_name='Surname')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Timestamp')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='Email')),
            ],
            options={
                'verbose_name': 'Doctor',
                'verbose_name_plural': 'Doctors',
            },
        ),
        migrations.CreateModel(
            name='ExternalLab',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, unique=True, verbose_name='Name')),
                ('code', models.CharField(blank=True, max_length=5, null=True, verbose_name='Code')),
            ],
            options={
                'verbose_name': 'External Lab',
                'verbose_name_plural': 'External Labs',
            },
        ),
        migrations.CreateModel(
            name='Institution',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
                ('code', models.CharField(blank=True, max_length=5, null=True, verbose_name='Code')),
                ('type', models.SmallIntegerField(choices=[(10, 'Government Hospital'), (20, 'Private Hospital'), (30, 'Clinic'), (40, 'Lab'), (50, 'Supplier'), (99, 'Internal')], verbose_name='Institution type')),
                ('phone', models.CharField(blank=True, max_length=30, null=True, verbose_name='Phone')),
                ('cellular', models.CharField(blank=True, max_length=30, null=True, verbose_name='Cellular phone')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Update date')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='Email')),
                ('address', models.CharField(blank=True, max_length=100, null=True, verbose_name='Address')),
                ('tax_no', models.CharField(blank=True, max_length=11, null=True, verbose_name='Tax no')),
                ('tax_office', models.CharField(blank=True, max_length=40, null=True, verbose_name='Tax office')),
            ],
            options={
                'verbose_name': 'Institution',
                'verbose_name_plural': 'Institutions',
            },
        ),
        migrations.CreateModel(
            name='MediumType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Name')),
                ('code', models.CharField(max_length=3, verbose_name='Code')),
                ('order', models.PositiveSmallIntegerField(blank=True, choices=[(0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12), (13, 13), (14, 14), (15, 15), (16, 16), (17, 17), (18, 18), (19, 19), (20, 20), (21, 21), (22, 22), (23, 23), (24, 24), (25, 25), (26, 26), (27, 27), (28, 28), (29, 29), (30, 30), (31, 31), (32, 32), (33, 33), (34, 34), (35, 35), (36, 36), (37, 37), (38, 38), (39, 39), (40, 40), (41, 41), (42, 42), (43, 43), (44, 44), (45, 45), (46, 46), (47, 47), (48, 48), (49, 49), (50, 50), (51, 51), (52, 52), (53, 53), (54, 54), (55, 55), (56, 56), (57, 57), (58, 58), (59, 59), (60, 60), (61, 61), (62, 62), (63, 63), (64, 64), (65, 65), (66, 66), (67, 67), (68, 68), (69, 69), (70, 70), (71, 71), (72, 72), (73, 73), (74, 74), (75, 75), (76, 76), (77, 77), (78, 78), (79, 79), (80, 80), (81, 81), (82, 82), (83, 83), (84, 84), (85, 85), (86, 86), (87, 87), (88, 88), (89, 89), (90, 90), (91, 91), (92, 92), (93, 93), (94, 94), (95, 95), (96, 96), (97, 97), (98, 98), (99, 99)], null=True, verbose_name='Order')),
            ],
            options={
                'ordering': ('-order',),
                'verbose_name': 'Medium Type',
                'verbose_name_plural': 'Medium Types',
            },
        ),
        migrations.CreateModel(
            name='Method',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Name')),
                ('code', models.CharField(blank=True, max_length=5, null=True, verbose_name='Code')),
            ],
            options={
                'verbose_name': 'Analyse Method',
                'verbose_name_plural': 'Analyse Methods',
            },
        ),
        migrations.CreateModel(
            name='Parameter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Name')),
                ('type', models.CharField(choices=[('keyval_s', 'Simple Key & Value'), ('keyval_t', 'Tabular Key & Value'), ('matrix_bool', 'Boolean Matrix'), ('matrix_str', 'String Matrix'), ('matrix_num', 'Numeric Matrix')], default='keyval_s', editable=False, max_length=12, verbose_name='Parameter type')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Update date')),
                ('parameter_definition', models.TextField(blank=True, help_text='\n<hr />\n<strong>Data Definition Help</strong><br />\nMatrices:<br />\ncols = N/N, Mt/N, Mt/Mt<br />\nrows = Faktör V Leiden PCR, Faktör V HR2 PCR<br />\n<hr />\nKey/Values:<br />\nkey<br />\nkey2<br />\nkey_with_preset=val1,val2,val3\n<br><br>Note: Parameters that their code name starts with underscore "_" will be excluded from reports.\n', null=True, verbose_name='Parameter definition')),
                ('analyze_type', models.ManyToManyField(to='lab.AnalyseType', verbose_name='Analyse Type')),
            ],
            options={
                'verbose_name': 'Parameter Definition',
                'verbose_name_plural': 'Parameter Definitions',
            },
        ),
        migrations.CreateModel(
            name='ParameterKey',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Name')),
                ('default_value', models.TextField(blank=True, null=True, verbose_name='Default value')),
                ('code', models.CharField(blank=True, help_text='Parameters that their code name starts with underscore "_" will be excluded from reports.', max_length=50, null=True, verbose_name='Code name')),
                ('help', models.CharField(blank=True, max_length=255, null=True, verbose_name='Help text')),
                ('multi', models.BooleanField(default=False, verbose_name='Multiple options')),
                ('type', models.CharField(choices=[('str', 'String'), ('num', 'Integer'), ('dec', 'Decimal'), ('bool', 'Boolean')], default=1, max_length=5, verbose_name='Parameter type')),
                ('presets', models.TextField(blank=True, null=True, verbose_name='Presets')),
                ('row_no', models.IntegerField(default=0, verbose_name='Row number')),
                ('col_no', models.IntegerField(blank=True, null=True, verbose_name='Column number')),
                ('parameter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lab.Parameter', verbose_name='Parameter Definition')),
            ],
            options={
                'verbose_name': 'Parameter Key',
                'verbose_name_plural': 'Parameter Keys',
            },
        ),
        migrations.CreateModel(
            name='ParameterValue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=30, verbose_name='Code name')),
                ('value', models.CharField(blank=True, max_length=30, null=True, verbose_name='Value')),
                ('value_int', models.IntegerField(default=0, editable=False, verbose_name='Int Value')),
                ('value_float', models.FloatField(default=0.0, editable=False, verbose_name='Float Value')),
                ('type', models.CharField(choices=[('str', 'String'), ('num', 'Integer'), ('dec', 'Decimal'), ('bool', 'Boolean')], max_length=5, verbose_name='Parameter type')),
                ('analyse', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lab.Analyse', verbose_name='Analyse')),
                ('key', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lab.ParameterKey', verbose_name='Parameter Key')),
                ('parameter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lab.Parameter', verbose_name='Parameter Definition')),
            ],
            options={
                'verbose_name': 'Result Value',
                'verbose_name_plural': 'Result Values',
            },
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tcno', models.CharField(max_length=11, verbose_name='TC No')),
                ('name', models.CharField(max_length=50, verbose_name='Name')),
                ('newborn', models.BooleanField(default=False, verbose_name='Is newborn?')),
                ('surname', models.CharField(max_length=50, verbose_name='Surname')),
                ('sex', models.SmallIntegerField(choices=[(1, 'Female'), (2, 'Male')], verbose_name='Sex')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Timestamp')),
                ('relation', models.SmallIntegerField(choices=[(1, 'Self'), (2, 'Father'), (3, 'Mother')], verbose_name='Patient Relation')),
                ('birthdate', models.DateField(verbose_name='Birthdate')),
                ('address', models.CharField(blank=True, max_length=100, null=True, verbose_name='Address')),
            ],
            options={
                'verbose_name': 'Patient',
                'verbose_name_plural': 'Patients',
            },
        ),
        migrations.CreateModel(
            name='ProcessLogic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, unique=True, verbose_name='Name')),
                ('code', models.TextField(blank=True, help_text='This code will be used to calculate the analyse result according to entered data', null=True, verbose_name='Process logic code')),
            ],
            options={
                'verbose_name': 'Process Logic Code',
                'verbose_name_plural': 'Process Logic Codes',
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bio', models.TextField(blank=True, max_length=500, null=True, verbose_name='Biography')),
                ('title', models.CharField(blank=True, max_length=30, null=True, verbose_name='Title')),
                ('prefix', models.CharField(blank=True, max_length=30, null=True, verbose_name='Title prefix')),
                ('address', models.TextField(blank=True, max_length=500, null=True, verbose_name='Address')),
                ('phone', models.CharField(blank=True, max_length=30, null=True, verbose_name='Phone')),
                ('signature', models.ImageField(blank=True, null=True, upload_to='static/signatures', verbose_name='Signature image')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Person',
                'verbose_name_plural': 'Persons',
            },
        ),
        migrations.CreateModel(
            name='ReportTemplate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=20, null=True, verbose_name='Name')),
                ('priority', models.PositiveSmallIntegerField(choices=[(0, 0), (5, 5), (10, 10), (15, 15), (20, 20), (25, 25), (30, 30), (35, 35), (40, 40), (45, 45)], default=5, verbose_name='Priority')),
                ('title', models.CharField(blank=True, max_length=30, null=True, verbose_name='Report title')),
                ('combo', models.BooleanField(default=False, help_text='Supports combined reporting of multiple analyses', verbose_name='Combo')),
                ('generic', models.BooleanField(default=False, help_text='Use generic reporting', verbose_name='Generic')),
                ('template', models.TextField(verbose_name='Template')),
                ('analyse_type', models.ManyToManyField(to='lab.AnalyseType', verbose_name='Analyse Type')),
            ],
            options={
                'ordering': ('-priority',),
                'verbose_name': 'Report Template',
                'verbose_name_plural': 'Report Templates',
            },
        ),
        migrations.CreateModel(
            name='SampleType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Name')),
                ('code', models.CharField(max_length=3, verbose_name='Code')),
                ('amount', models.CharField(blank=True, max_length=20, null=True, verbose_name='Amount')),
                ('order', models.PositiveSmallIntegerField(blank=True, choices=[(0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12), (13, 13), (14, 14), (15, 15), (16, 16), (17, 17), (18, 18), (19, 19), (20, 20), (21, 21), (22, 22), (23, 23), (24, 24), (25, 25), (26, 26), (27, 27), (28, 28), (29, 29), (30, 30), (31, 31), (32, 32), (33, 33), (34, 34), (35, 35), (36, 36), (37, 37), (38, 38), (39, 39), (40, 40), (41, 41), (42, 42), (43, 43), (44, 44), (45, 45), (46, 46), (47, 47), (48, 48), (49, 49), (50, 50), (51, 51), (52, 52), (53, 53), (54, 54), (55, 55), (56, 56), (57, 57), (58, 58), (59, 59), (60, 60), (61, 61), (62, 62), (63, 63), (64, 64), (65, 65), (66, 66), (67, 67), (68, 68), (69, 69), (70, 70), (71, 71), (72, 72), (73, 73), (74, 74), (75, 75), (76, 76), (77, 77), (78, 78), (79, 79), (80, 80), (81, 81), (82, 82), (83, 83), (84, 84), (85, 85), (86, 86), (87, 87), (88, 88), (89, 89), (90, 90), (91, 91), (92, 92), (93, 93), (94, 94), (95, 95), (96, 96), (97, 97), (98, 98), (99, 99)], null=True, verbose_name='Sort order')),
                ('medium', models.ManyToManyField(to='lab.MediumType', verbose_name='Medium Type')),
            ],
            options={
                'ordering': ('order',),
                'verbose_name': 'Sample Type',
                'verbose_name_plural': 'Sample Types',
            },
        ),
        migrations.CreateModel(
            name='State',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.CharField(blank=True, max_length=250, null=True, verbose_name='Notes')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Update date')),
                ('current_state', models.BooleanField(default=True, editable=False, verbose_name='Current state')),
                ('group', models.PositiveSmallIntegerField(choices=[(1, 1), (2, 2), (3, 3), (100, 'All')], default=1, verbose_name='Group')),
                ('analyse', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lab.Analyse', verbose_name='Analyse')),
            ],
            options={
                'ordering': ('timestamp',),
                'verbose_name': 'Analyse State',
                'verbose_name_plural': 'Analyse States',
            },
        ),
        migrations.CreateModel(
            name='StateDefinition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Name')),
                ('explanation', models.TextField(blank=True, null=True, verbose_name='Explanation')),
                ('finish', models.BooleanField(default=False, verbose_name='Finished state')),
                ('approve', models.BooleanField(default=False, verbose_name='Approved state')),
                ('accept', models.BooleanField(default=False, verbose_name='Accepted state')),
                ('first', models.BooleanField(default=False, verbose_name='First state')),
                ('order', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Order')),
                ('type', models.ManyToManyField(to='lab.AnalyseType', verbose_name='Analyse Type')),
            ],
            options={
                'ordering': ('order',),
                'verbose_name': 'Analyse State Definition',
                'verbose_name_plural': 'Analyse State Definitions',
            },
        ),
        migrations.AddField(
            model_name='state',
            name='definition',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lab.StateDefinition', verbose_name='State'),
        ),
        migrations.AddField(
            model_name='state',
            name='personnel',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, to='lab.Profile', verbose_name='Personnel'),
        ),
        migrations.AddField(
            model_name='state',
            name='sample_type',
            field=models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, to='lab.SampleType', verbose_name='Sample type'),
        ),
        migrations.AddField(
            model_name='parameter',
            name='process_logic',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='lab.ProcessLogic', verbose_name='Process logic'),
        ),
        migrations.AddField(
            model_name='externallab',
            name='institution',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='lab.Institution'),
        ),
        migrations.AddField(
            model_name='doctor',
            name='institution',
            field=models.ForeignKey(blank=True, help_text='If left blank, an institution record will be created for this doctor', null=True, on_delete=django.db.models.deletion.SET_NULL, to='lab.Institution'),
        ),
        migrations.AddField(
            model_name='category',
            name='states',
            field=models.ManyToManyField(to='lab.StateDefinition', verbose_name='State Definitions'),
        ),
        migrations.AddField(
            model_name='analysetype',
            name='category',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='lab.Category', verbose_name='Category'),
        ),
        migrations.AddField(
            model_name='analysetype',
            name='external_lab',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='lab.ExternalLab', verbose_name='External lab'),
        ),
        migrations.AddField(
            model_name='analysetype',
            name='method',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='lab.Method', verbose_name='Method'),
        ),
        migrations.AddField(
            model_name='analysetype',
            name='process_logic',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='lab.ProcessLogic', verbose_name='Process logic'),
        ),
        migrations.AddField(
            model_name='analysetype',
            name='sample_type',
            field=models.ManyToManyField(to='lab.SampleType', verbose_name='Sample Type'),
        ),
        migrations.AddField(
            model_name='analysetype',
            name='subtypes',
            field=models.ManyToManyField(blank=True, null=True, related_name='main_type', to='lab.AnalyseType', verbose_name='Sub types'),
        ),
        migrations.AddField(
            model_name='analyse',
            name='analyser',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='analyses', to='lab.Profile', verbose_name='Analyser'),
        ),
        migrations.AddField(
            model_name='analyse',
            name='approver',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='approved_analyses', to='lab.Profile', verbose_name='Approver'),
        ),
        migrations.AddField(
            model_name='analyse',
            name='external_lab',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='lab.ExternalLab', verbose_name='External lab'),
        ),
        migrations.AddField(
            model_name='analyse',
            name='medium_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='lab.MediumType', verbose_name='Medium type'),
        ),
        migrations.AddField(
            model_name='analyse',
            name='sample_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='lab.SampleType', verbose_name='Sample type'),
        ),
        migrations.AddField(
            model_name='analyse',
            name='template',
            field=models.ForeignKey(blank=True, help_text='Instead of default one, use this template to create the analyse report.', null=True, on_delete=django.db.models.deletion.PROTECT, to='lab.ReportTemplate', verbose_name='Report template'),
        ),
        migrations.AddField(
            model_name='analyse',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='lab.AnalyseType', verbose_name='Analyse Type'),
        ),
        migrations.AddField(
            model_name='admissionstate',
            name='definition',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='lab.AdmissionStateDefinition', verbose_name='State'),
        ),
        migrations.AddField(
            model_name='admissionsample',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='lab.SampleType', verbose_name='Sample type'),
        ),
        migrations.AddField(
            model_name='admission',
            name='doctor',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='lab.Doctor', verbose_name='Doctor'),
        ),
        migrations.AddField(
            model_name='admission',
            name='institution',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='lab.Institution', verbose_name='Institution'),
        ),
        migrations.AddField(
            model_name='admission',
            name='patient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='lab.Patient', verbose_name='Patient'),
        ),
    ]
